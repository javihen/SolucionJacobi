# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/101vlhap1jJd1OEo-9XOmAWlR1peIhYDU
"""

import numpy as np

A = np.array([[52, 20, 25],
              [30, 50, 20],
              [18, 30, 55]])

b = np.array([4800, 5810, 5690])

x = np.zeros_like(b)

# Parámetros del método de Jacobi 0.1
tolerancia = 1e-10
max_iter = 99
n_iter = 0

for k in range(max_iter):
    x_new = np.zeros_like(x)
    for i in range(A.shape[0]):
        suma = sum(A[i][j] * x[j] for j in range(A.shape[1]) if j != i)
        x_new[i] = (b[i] - suma) / A[i][i]

    if np.linalg.norm(x_new - x, ord=np.inf) < tolerancia:
        print(f"Convergencia alcanzada en {k} iteraciones.")
        break

    x = x_new
    n_iter += 1

print("Solución:", x, "en la iteracion ",n_iter)